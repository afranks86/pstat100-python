---
title: "Statistical graphics"
author: "PSTAT100 Spring 2023"
date: "Week 4, Lecture 1"
format: 
    revealjs:
        smaller: true
        incremental: true
        slide-number: true
jupyter: python3
execute:
    echo: false
---

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
# libraries
import pandas as pd
import numpy as np
import altair as alt

# disable row limit for plotting
alt.data_transformers.disable_max_rows()
```

## This week: data visualization

**Objective**: introduce the uses, types, anatomy, and construction of statistical graphics. 

* **Why visualize?**
    + No one likes reading a table
    + Exploratory graphics: discovery
    + Presentation graphics: communication

* **Statistical graphics**
    + Elements: axes, geometric objects, aesthetic attributes, and text
    + Construction: mapping data to graphical elements
    + Common statistical graphics

* **Principles of effective visualization**
    + Iliinsky: novel; informative; efficient; pleasing.
    + Workflow for developing effective plots

## Notice your reaction

![](figures/example-table.PNG)

. . .

This is great for a paper or technical report, but it takes effort to discern patterns; I'd much rather see a few plots, like achievement vs. year by grade and gender.

## Uses of graphics

Graphics can be used for one of two main purposes.

1. Discovery
2. Communication of findings

. . .

We will focus on using graphics for discovery.

## Types of graphics

There is a broad distinction between:

* **exploratory graphics**, which are intended to be seen only by analysts; and
* **presentation graphics**, which are intended to be seen by an audience.

. . .

Exploratory graphics are made quickly in large volumes, and usually not formatted too carefully. Think of them like the pages of a sketchbook.

. . .

Presentation graphics are made slowly with great attention to detail. Think of them as exhibition artworks.

. . .

The two are not mutually exclusive: an especially helpful exploratory graphic is often worth developing as a presentation graphic to help an audience understand 'what the data look like'.

## Elements of statistical graphics

Statistical graphics are actually quite simple. They consist of the following four elements:

1. **Axes**
    + References for all other graphical elements.
2. **Geometric objects**
    + Points, lines, curves, filled regions, etc.
3. **Aesthetic attributes**
    + Color, shape, size, opacity/transparency.
4. **Text**
    + Labels, legends, and titles.

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
points = pd.DataFrame(data = {'x': np.arange(5), 'y': np.logspace(0, 2, 5)})
axes = alt.Chart(points).mark_point(opacity = 0).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = '')
).properties(
    width = 200,
    height = 200
)

pointgeom = alt.Chart(points).mark_point(opacity = 1).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = '')
).properties(
    width = 200,
    height = 200,
    title = "Point"
)

linegeom = alt.Chart(points).mark_line(opacity = 1).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = '')
).properties(
    width = 200,
    height = 200,
    title = 'Line'
)

polygeom = alt.Chart(points).mark_area(opacity = 0.4).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = '')
).properties(
    width = 200,
    height = 200,
    title = 'Filled region'
)

shapes = alt.Chart(points).mark_point(size = 150).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = ''),
    shape = alt.Shape('y:N', legend = None)
).properties(
    width = 150,
    height = 150,
    title = 'Shape'
)

colors = alt.Chart(points).mark_point(size = 150).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = ''),
    color = alt.Color('y:N', legend = None)
).properties(
    width = 150,
    height = 150,
    title = 'Color'
)

opacities = alt.Chart(points).mark_circle(size = 150).encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = ''),
    opacity = alt.Opacity('y:N', legend = None)
).properties(
    width = 150,
    height = 150,
    title = 'Opacity'
)

sizes = alt.Chart(points).mark_point().encode(
    x = alt.X('x', title = ''), 
    y = alt.Y('y', title = ''),
    size = alt.Size('y:N', legend = None)
).properties(
    width = 150,
    height = 150,
    title = 'Size'
)
```

## Axes

We are all familiar with axes. The word *axis* literally means axle: an axis is an object that other things turn around.

. . .

In statistical graphics, axes establish positional references for locating any geometric object -- line, point, polygon -- on the graphic.

```{python}
#| slideshow: {slide_type: fragment}
axes
```

## Geometric objects

Geometric objects are the things depicted on a plot, whatever those may be; typically points, lines, polygons, and shapes.

```{python}
#| slideshow: {slide_type: fragment}
pointgeom | linegeom | polygeom
```

## Aesthetic attributes

For us, *aesthetics* will mean qualities of geometric objects, like color.

. . .

Primary aesthetics in statistical graphics are:

* Shape (for points)
* Color
* Size
* Opacity

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
shapes | colors | sizes | opacities
```

## Text

Text is used to label axes, objects, legends, and specify titles.

. . .

Text may seem innocuous, but it is what creates story -- text gives a plot its plot!

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
points['z'] = 10*points['x'] + 10
alt.Chart(points).mark_line().encode(
    x = alt.X('z', title = 'Age'),
    y = alt.Y('y', title = 'Excitement about socks as birthday gift')
).properties(
    width = 300,
    height = 300
)
```

## Statistical graphics are mappings

Statistical graphics are **mappings** of dataframe columns to graphical elements: axes, geometric objects, and aesthetic attributes. 

. . .

For a simple example, consider the following time series of Cuba's population by year:

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
pop = pd.read_csv('data/population.csv', encoding = 'latin1').melt(
    id_vars = ['Country Name', 'Country Code'],
    var_name = 'Year',
    value_name = 'Population'
)

pop[pop['Country Code'] == 'CUB'].head(2)
```

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
pop_plot = alt.Chart(pop[pop['Country Code'] == 'CUB']).mark_line().encode(
    x = 'Year',
    y = alt.Y('Population', scale = alt.Scale(zero = False))
).properties(
    width = 600,
    height = 100,
    title = 'Population of Cuba'
)

pop_plot
```

. . .

In the plot:
* population $\longrightarrow$ y coordinate of axis;
* year $\longrightarrow$ x coordinate of axis;
* the line connects the rows.

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
countryinfo = pd.read_csv('data/country-info.csv').rename(
    columns = {'alpha-3': 'Country Code', 'region': 'Region'}
).loc[:, ['Country Code', 'Region']]

popregion = pd.merge(
    countryinfo, 
    pop, 
    how = 'right', 
    on = ['Country Code']
).dropna().astype(
    {'Region': 'category'}
).groupby(
    ['Region', 'Year']
).sum().reset_index()

popregion_plot = alt.Chart(popregion).mark_line(opacity = 1).encode(
    x = 'Year:T',
    y = alt.Y('Population', scale = alt.Scale(type = 'log', zero = False)),
    color = 'Region'
).properties(width = 500, height = 150)
```

## Mapping columns to aesthetics

Now consider aggregated populations by global region and year:

```{python}
popregion.head(2)
```

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
popregion_plot
```

. . .

In this plot:

* population $\longrightarrow$ y
* year $\longrightarrow$ x
* region $\longrightarrow$ color

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
lab3 = pd.read_csv('data/lab3-data.csv')

# first plot in lab
firstplot = alt.Chart(lab3).mark_circle().encode(
    x = alt.X('GDP per capita'),
    y = alt.Y('All', title = 'Life expectancy at birth', scale = alt.Scale(zero = False))
)

# define new variable for difference
lab3['Difference'] = lab3.Female - lab3.Male 

# final plot in lab
finalplot1 = alt.Chart(lab3).mark_circle(opacity = 0.5).encode(
    x = alt.X('GDP per capita', scale = alt.Scale(type = 'log')),
    y = alt.Y('All', title = 'Life expectancy at birth', scale = alt.Scale(zero = False)),
    color = 'region',
    size = alt.Size('Population', scale = alt.Scale(type = 'sqrt'))
).properties(
    width = 150, 
    height = 200
).facet(
    column = 'Year'
)

finalplot2 = alt.Chart(lab3).mark_circle(opacity = 0.5).encode(
    x = alt.X('GDP per capita', scale = alt.Scale(type = 'log')),
    y = alt.Y('Difference', title = 'F-M Difference in life expectancy at birth', scale = alt.Scale(zero = False)),
    color = 'region',
    size = alt.Size('Population', scale = alt.Scale(type = 'sqrt'))
).properties(
    width = 150, 
    height = 200
).facet(
    column = 'Year'
)
```

## Construction of statistical graphics

This may seem like an overly theoretical framework for describing simple plots.

. . .

But the ability to map variables to the elements of a graphic is essential because *it means we can display more than two variables at a time by leveraging aesthetic attributes*.

* Creates the possibility to visualize complex information.

. . .

You will explore how to leverage this in Lab 3. Here's a preview.

## Displaying complex information using aesthetics

Begin with this scatterplot:

```{python}
firstplot
```

. . .

Each point represents a country in a particular year. The graphic shows that life expectancy increases with GDP per capita.

## Displaying complex information using aesthetics

In the lab you'll add aesthetic mappings step by step until arriving at this plot:

```{python}
finalplot1
```

. . .

In this plot, each point represents a country and:

* GDP per capita $\longrightarrow$ x
* Life expectancy at birth $\longrightarrow$ y
* Global region $\longrightarrow$ color
* Population $\longrightarrow$ size
* Year $\longrightarrow$ facets (panels)

## Displaying complex information using aesthetics

Further incorporating sex shows that GDP per capita is associated with differential life expectancy gaps between men and women:

```{python}
finalplot2
```

. . .

In other words, on average women outlive men by longer in wealtheir countries.

. . .

Notice that the gap increases with GDP in general, but Oceania exhibits the opposite trend!

## Altair

Altair, a python library, creates graphics exactly as described above: mapping columns of a dataframe to graphical elements. 

. . .

It has a somewhat idiosyncratic syntactical pattern involving a "chart", "marks", and "encodings":

Altair syntax | Example handle | Operation 
---|---|---
Chart | `alt.Chart(df)` | Coerces a dataframe `df` to a chart object
Mark | `mark_point()` | Specifies a geometric object
Encoding | `encode(x = ..., y = ..., color = ...)` | Maps columns of `df` to objects and aesthetics

. . .

These are chained together to make a graphic.

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
#| echo: true
alt.Chart( # axes
    popregion # dataframe
).mark_line( # geometric object
).encode(x = 'Year', y = 'Population', color = 'Region' # mappings
).properties(width = 500, height = 100) # resize
```

## Altair

Earlier, the y-axis scale was adjusted so that the lines were a bit more spread out in the graphic, and the x-axis had a less congested appearance. This was done by modifying the *encodings*:

* specify data type for year as time
* specify display scale for population

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
#| echo: true
alt.Chart( 
    popregion
).mark_line( 
).encode( 
    x = 'Year:T', # change here -- data type specification
    y = alt.Y('Population', scale = alt.Scale(type = 'log')), # change here -- axis scale
    color = 'Region'
).properties(width = 500, height = 150) 
```

## Common statistical graphics and their uses

Broadly, the most common statistical graphics can be divided according to the number of variables that form their primary display. The uses listed below are not exclusive, just some of the most common.

* **Single-variable graphics** are used to visualize distributions.

* **Two-variable graphics** are used to visualize relationships.

* **Three-variable graphics** are used to visualize spatial data, matrices, and a collection of other data types.

. . .

> Most graphics you'll encounter are grouped single- or two-variable graphics with superpositions of geometric objects differentiating observed from inferred values -- *e.g.*, scatterplots with points color-coded by another (grouping) variable and trend lines. 

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
# plots for next section
popcountry = pd.merge(
    countryinfo, 
    pop, 
    how = 'right', 
    on = ['Country Code']
).dropna().astype(
    {'Region': 'category'}
).set_index('Year')

popcountry['log(Population)'] = np.log(popcountry['Population'])
boxplot = alt.Chart(popcountry.loc["1970"]).mark_boxplot().encode(
    x = alt.X('Population', scale = alt.Scale(type = 'log'))
).properties(
    height = 50,
    title = 'National populations in 1970'
)

histogram = alt.Chart(popcountry.loc["1970"]).mark_bar().encode(
    x = alt.X('log(Population)', bin = alt.Bin(maxbins = 20)),
    y = 'count()'
).properties(
    height = 150,
    title = 'National populations in 1970'
)
```

## Single-variable graphics: boxplot

Single-variable graphics are used to display the distribution of values of a single variable.

. . .

**Boxplots** show the spread, center, and skewness of values.

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
boxplot
```

## Single-variable graphics: boxplot

The Altair syntax for boxplot construction is shown below: 

```{python}
#| echo: true
boxplot = alt.Chart(
    popcountry.loc["1970"]
).mark_boxplot().encode(
    x = alt.X('Population', 
              scale = alt.Scale(type = 'log'))
).properties(
    height = 50,
    title = 'National populations in 1970'
)

boxplot
```

## Single-variable graphics: histogram

**Histograms** show the relative frequencies of values of a single variable.

. . .

One can see spread, center, skewness, and outliers, as with boxplots, but _**also shape**_. 

```{python}
histogram
```

## Single-variable graphics: histogram

The Altair syntax for histogram constuction is as follows:

```{python}
#| echo: true
histogram = alt.Chart(
    popcountry.loc["1970"]
).mark_bar().encode(
    x = alt.X('log(Population)', 
              bin = alt.Bin(maxbins = 20)),
    y = 'count()'
).properties(
    height = 150,
    title = 'National populations in 1970'
)

histogram
```

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
# plots for next slide

histogram = alt.Chart(
    popcountry.loc["1970"]
).mark_bar().encode(
    x = alt.X('log(Population)', 
              bin = alt.Bin(maxbins = 20),
              title = '', 
              axis = alt.Axis(labels = False)),
    y = 'count()'
).properties(
    height = 150,
    title = 'National populations in 1970'
)

boxplot = boxplot.properties(title = '', height = 30)
```

## Single-variable graphics

These single-variable graphics show similar information, but a little differently.

```{python}
#| echo: true
histogram & boxplot
```

. . .

Notice that you can see two modes in the histogram, but only the primary mode in the boxplot.

. . .

Notice also that Altair allows stacking of charts: `chart-top & chart-bottom` aligns charts vertically.

## Single-variable graphics

**Single-variable graphics are not necessarily limited to univariate data.**

. . .

For example, we could make one boxplot for each year and show the distributions of national populations for each year:

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
alt.Chart(popcountry.reset_index()).mark_boxplot(outliers = True, size = 7).encode(
    x = 'Year:T',
    y = alt.Y('Population', scale = alt.Scale(type = 'log'))
).properties(width = 600)
```

```{python}
#| slideshow: {slide_type: skip}
#| tags: []
# plots for next section

lifegdp = lab3.set_index('Year')

scatter = alt.Chart(lifegdp.loc[2015]).mark_point().encode(
    x = alt.X('GDP per capita', scale = alt.Scale(type = 'log')),
    y = alt.Y('All', scale = alt.Scale(zero = False), title = 'Life expectancy at birth')
)

line = alt.Chart(popregion).mark_line().encode(
    x = 'Year:T',
    y = alt.Y('Population', scale = alt.Scale(type = 'log')),
    color = 'Region'
)
```

## Two-variable graphics: scatterplot

Scatterplots display relationships between two variables.

```{python}
scatter
```

. . .

The pattern of scatter shows that life expectancy generally increases with GDP per capita.

## Two-variable graphics: scatterplot

The Altair syntax for this plot is as follows:

```{python}
#| echo: true
alt.Chart(
    lifegdp.loc[2015]
).mark_point().encode(
    x = alt.X('GDP per capita', 
              scale = alt.Scale(type = 'log')),
    y = alt.Y('All', 
              scale = alt.Scale(zero = False), 
              title = 'Life expectancy at birth')
)
```

## Two-variable graphics: line plot

Line plots display trajectories by connecting rows in a dataframe. 

. . .

These can represent trends, time courses, or paths traveled.

```{python}
line
```

## Two-variable graphics: line plot

The Altair syntax for this plot is as follows:

```{python}
#| echo: true
alt.Chart(popregion).mark_line().encode(
    x = 'Year:T',
    y = alt.Y('Population', scale = alt.Scale(type = 'log')),
    color = 'Region'
)
```

## Two-variable graphics: bar plot

Bar plots usually depict the relationship between the magnitude of one variable and another.

. . .

For instance:

```{python}
alt.Chart(popregion).mark_bar().encode(
    x = 'Year:T',
    y = alt.Y('Population:Q'),
    color = 'Region'
).properties(height = 200)
```

. . .

The graphic indicates in particular that:

* global population growth (total height of bar) is increasing linearly;
* the share of the global population in Asia is increasing over time.

## What makes visualizations effective?

Iliinsky introduces some *desiderata* for data visualizations.

. . .

The article focuses on going beyond conventional 'formats' (scatterplot, bar chart, etc.), but I think we can equally well apply the criteria to standard statistical graphics.

* **Novel.** Novel visuals don't need to elicit superlative reactions, but they should (if only subtly) surprise and spark interest to some extent.
    + Were *you* excited or interested when you made the plot?

* **Informative**. Informative visuals make information apparent. In a way they are *unambiguous*.
    + Did you learn something when you made the plot?
    + Did you have to think very hard to understand what the plot has to say?

* **Efficient**. Efficient visuals have an accessible message. They use space economically but without becoming overly complicated.
    + Include exactly what you want to show -- nothing more, nothing less.
    + Did you add anything that doesn't really need to be there?

* **Pleasant**. Visuals should be nice to look at!
    + Do you smile a little when you open up that plot?

## Workflow tips and advice

Developing graphics is an iterative trial-and-error process.

* **Hone in on an essential question or relationship.** 
    + This might require making a few crude plots to help you decide where to focus.

* **Start simple.** 
    + Begin with the most basic plot you can.

* **Add complexity as you go.**
    + Decide what to add based on *your own questions* rather than an envisioned endpoint.

* **Change one thing at a time, and keep copies.**
    + You might well need to backtrack.

* **Don't be afraid of starting over.**
    + If an idea doesn't pan out, no harm done!